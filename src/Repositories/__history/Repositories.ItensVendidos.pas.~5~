unit Repositories.ItensVendidos;

interface

uses
  System.SysUtils,
  Models.ItensVendidos,
  Models.Venda,
  Models.Produto,
  System.Generics.Collections,
  Data.DB,
  Data.Win.ADODB,
  Contexto.Conexao.Interfaces,
  Repositories.Interfaces,
  Contexto.Query,
  System.StrUtils;

type
  TRepositoryItensVendidos = class(TInterfacedObject, IRepositoryItensVendidos)
  private
    FQuery: IQuery;
    FItensVendidos: TItensVendidos;
    FItensVendidoss: TObjectList<TItensVendidos>;
    FDataSet: TDataSet;
    FProduto: TProduto;
    FVenda: TVenda;
    constructor Create();
  public
    function ObterItensVendidoss(): TObjectList<TItensVendidos>;
    function ObterItensVendidosPorIdentificador(const pIdentificadorItensVendidos: string): TItensVendidos;
    function CriarItensVendidos(const pItensVendidos: TItensVendidos): TItensVendidos;
    function AtualizarItensVendidos(const pIdentificadorItensVendidos: string; const pItensVendidos: TItensVendidos): TItensVendidos;
    function ItensVendidosExiste(const pIdentificadorItensVendidos: string): Boolean;
    procedure ExcluirItensVendidos(const pIdentificadorItensVendidos: string);
    class function NovaInstancia(): IRepositoryItensVendidos;
    destructor Destroy(); override;
  end;

implementation

{ TRepositoryItensVendidos }

function TRepositoryItensVendidos.AtualizarItensVendidos(const pIdentificadorItensVendidos: string; const pItensVendidos: TItensVendidos): TItensVendidos;
const
  UPDATE_ITENSVENDIDOS = 'Update ItensVendidos Set Produto=''%s'', Venda=''%s'', Quantidade=''%s'' Where id=''%s''';
begin
  FQuery.Exec(Format(UPDATE_ITENSVENDIDOS, [
    pItensVendidos.Produto.Id, pItensVendidos.Venda.Id, FloatToStr(pItensVendidos.Quantidade).Replace('.', '').Replace(',', '.'), pIdentificadorItensVendidos]));
  Result := pItensVendidos;
end;

function TRepositoryItensVendidos.ItensVendidosExiste(const pIdentificadorItensVendidos: string): Boolean;
begin
  FItensVendidos := ObterItensVendidosPorIdentificador(pIdentificadorItensVendidos);
  Result := Assigned(FItensVendidos);
end;

constructor TRepositoryItensVendidos.Create();
begin
  FQuery := TQuery.NovaInstancia();
  FItensVendidos := TItensVendidos.Create();
  FItensVendidoss := TObjectList<TItensVendidos>.Create(True);
end;

function TRepositoryItensVendidos.CriarItensVendidos(const pItensVendidos: TItensVendidos): TItensVendidos;
const
  INSERIR_ItensVendidos =
                   'Insert Into'
    + sLineBreak + '  ItensVendidos ('
    + sLineBreak + '  Id,'
    + sLineBreak + '  Produto,'
    + sLineBreak + '  Venda,'
    + sLineBreak + '  Quantidade)'
    + sLineBreak + 'Values ('
    + sLineBreak + '  ''%s'','
    + sLineBreak + '  ''%s'','
    + sLineBreak + '  ''%s'','
    + sLineBreak + '  ''%s'')';
begin
  FQuery.Exec(Format(INSERIR_ItensVendidos, [
    pItensVendidos.Id, pItensVendidos.Produto.Id, pItensVendidos.Venda.Id, FloatToStr(pItensVendidos.Quantidade)]));
  Result := pItensVendidos;
end;

destructor TRepositoryItensVendidos.Destroy();
begin
  inherited;
end;

procedure TRepositoryItensVendidos.ExcluirItensVendidos(const pIdentificadorItensVendidos: string);
const
  EXCLUIR_ItensVendidos = 'Delete From ItensVendidos Where id=''%s''';
begin
  FQuery.Exec(Format(EXCLUIR_ItensVendidos, [pIdentificadorItensVendidos]));
end;

class function TRepositoryItensVendidos.NovaInstancia: IRepositoryItensVendidos;
begin
  Result := Self.Create();
end;

function TRepositoryItensVendidos.ObterItensVendidosPorIdentificador(const pIdentificadorItensVendidos: string): TItensVendidos;
const
  SELECT_ItensVendidos_IDENTIFICADOR = 'Select Id, Produto, Venda, Quantidade From ItensVendidos Where Id=''%s''';
begin
  FDataSet := FQuery.Query(Format(SELECT_ItensVendidos_IDENTIFICADOR, [pIdentificadorItensVendidos]));

  if (FDataSet.RecordCount = 0) then
    Exit(nil);

  FItensVendidos := TItensVendidos.Create(
    FProduto,
    FVenda,
    FDataSet.FieldByName('Quantidade').AsFloat,
    FDataSet.FieldByName('Id').AsString);
  Result := FItensVendidos;
end;

function TRepositoryItensVendidos.ObterItensVendidoss(): TObjectList<TItensVendidos>;
const
  SELECT_ITENSVENDIDOS_IDENTIFICADOR = 'Select Id, Nome, DataNascimento, Documento From ItensVendidos';
var
  lItensVendidos: TItensVendidos;
begin
  FDataSet := FQuery.Query(SELECT_ITENSVENDIDOS_IDENTIFICADOR);

  if (FDataSet.RecordCount = 0) then
    Exit(nil);

  FItensVendidoss.Clear();
  FDataSet.First();

  while (not FDataSet.Eof) do
  begin
    lItensVendidos := TItensVendidos.Create(
      FProduto,
      FVenda,
      FDataSet.FieldByName('Quantidade').AsFloat,
      FDataSet.FieldByName('Id').AsString);

    FItensVendidoss.Add(lItensVendidos);
    FDataSet.Next();
  end;

  Result := FItensVendidoss;
end;

end.
