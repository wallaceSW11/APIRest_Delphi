unit Controllers.Produto;

interface

uses
  Models.Produto,
  System.Generics.Collections,
  System.SysUtils,
  Horse,
  Horse.Commons,
  System.JSON,
  REST.Json,
  Repositories.Produto,
  Repositories.Interfaces,
  Controllers.Interfaces;

type
  TControllerProduto = class(TInterfacedObject, IControllerProduto)
  private
    FRepositorioProduto: IRepositoryProduto;
    FProduto: TProduto;
    FProdutos: TObjectList<TProduto>;
    constructor Create();
    function ProdutoExiste(Res: THorseResponse; const pIdentificadorProduto: string): Boolean;
  public
    procedure ListarProdutoPorId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
    procedure ListarProdutos(Req: THorseRequest; Res: THorseResponse; Next: TProc);
    procedure CriarProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
    procedure AtualizarProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
    procedure ExcluirProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
    procedure Routes();
    class function NovaInstancia(): IControllerProduto;
    destructor Destroy(); override;
  end;

implementation

{ TControllerProduto }

procedure TControllerProduto.AtualizarProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
const
  FALHA_AO_ATUALIZAR_PRODUTO = 'Falha ao atualizar o produto.';
begin
  if (not ProdutoExiste(Res, Req.Params['id'])) then
    Exit();

  FProduto := FRepositorioProduto.AtualizarProduto(
    Req.Params['id'], TJson.JsonToObject<TProduto>(Req.Body<TJSONObject>));

  if (Assigned(FProduto)) then
    Res.Send<TJsonObject>(TJson.ObjectToJsonObject(FProduto)).Status(THTTPStatus.Ok)
  else
    Res.Send(FALHA_AO_ATUALIZAR_PRODUTO).Status(THTTPStatus.BadRequest);
end;

function TControllerProduto.ProdutoExiste(Res: THorseResponse; const pIdentificadorProduto: string): Boolean;
const
  PRODUTO_NAO_LOCALIZADO = 'Não foi localizado o produto com o id "%s"';
begin
  Result := True;

  if (not FRepositorioProduto.ProdutoExiste(pIdentificadorProduto)) then
  begin
    Res.Send(Format(PRODUTO_NAO_LOCALIZADO, [pIdentificadorProduto])).Status(THTTPStatus.NotFound);
    Result := False;
  end;
end;

constructor TControllerProduto.Create();
begin
  FRepositorioProduto := TRepositoryProduto.NovaInstancia();
  FProduto := TProduto.Create();
  FProdutos := TObjectList<TProduto>.Create();
end;

procedure TControllerProduto.CriarProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
const
  FALHA_AO_CRIAR_Produto = 'Falha ao criar o Produto.';
begin
  FProduto := TJson.JsonToObject<TProduto>(Req.Body<TJSONObject>);
  FProduto := FRepositorioProduto.CriarProduto(FProduto);

  if (Assigned(FProduto)) then
    Res.Send<TJsonObject>(TJson.ObjectToJsonObject(FProduto)).Status(THTTPStatus.Created)
  else
    Res.Send(FALHA_AO_CRIAR_Produto).Status(THTTPStatus.BadRequest);
end;

destructor TControllerProduto.Destroy;
begin
  FProduto.Free();
  FProdutos.Free();
  inherited;
end;

procedure TControllerProduto.ExcluirProduto(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  if (not ProdutoExiste(Res, Req.Params['id'])) then
    Exit();

  FRepositorioProduto.ExcluirProduto(Req.Params['id']);
  Res.Send('').Status(THTTPStatus.NoContent);
end;

procedure TControllerProduto.ListarProdutoPorId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  if (not ProdutoExiste(Res, Req.Params['id'])) then
    Exit();

  FProduto := FRepositorioProduto.ObterProdutoPorIdentificador(Req.Params['id']);
  Res.Send<TJsonObject>(TJson.ObjectToJsonObject(FProduto)).Status(THTTPStatus.OK);
end;

procedure TControllerProduto.ListarProdutos(Req: THorseRequest; Res: THorseResponse; Next: TProc);
const
  PRODUTOS_NAO_ENCONTRADOS = 'Nenhum Produto foi encontrado.';
var
  lProduto: TProduto;
  lJsonArray: TJsonarray;
  lJsonObject: TJsonObject;
begin
  FProdutos := FRepositorioProduto.ObterProdutos();

  if (not (Assigned(FProdutos))) then
  begin
    Res.Send(PRODUTOS_NAO_ENCONTRADOS).Status(THTTPStatus.NotFound);
    Exit();
  end;

  lJsonArray := TJSONArray.Create;

  for lProduto in FProdutos do
  begin
    lJsonObject := TJson.ObjectToJsonObject(lProduto);
    lJsonArray.AddElement(lJsonObject);
  end;

  Res.Send<TJSONArray>(lJsonArray);
end;


class function TControllerProduto.NovaInstancia(): IControllerProduto;
begin
  Result := Self.Create();
end;

procedure TControllerProduto.Routes();
begin
  THorse.Get('/produto/', ListarProdutos);
  THorse.Get('/produto/:id', ListarProdutoPorId);
  THorse.Post('/produto/', CriarProduto);
  THorse.PUT('/produto/:id', AtualizarProduto);
  THorse.Delete('produto/:id', ExcluirProduto);
end;

end.
